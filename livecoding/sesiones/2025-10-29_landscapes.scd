// ═══════════════════════════════════════════════════════════════
// 🎵 PLANTILLA DE SESIÓN - ProxySpace Hydra
// ═══════════════════════════════════════════════════════════════
// Fecha: 2025-10-29
// Concepto: 2025-10-29
// Notas: 2025-10-29
// ═══════════════════════════════════════════════════════════════

// ┌─────────────────────────────────────────────────────────────┐
// │ 1. CARGAR SETUP (SynthDefs, Snippets, Samples, ProxySpace) │
// └─────────────────────────────────────────────────────────────┘

("../setup/Setup.scd").loadRelative;

// Esperar a que termine el setup antes de continuar
// (el setup ya incluye s.waitForBoot)

// ┌─────────────────────────────────────────────────────────────┐
// │ 2. CONFIGURACIÓN OSC → openFrameworks + Hydra              │
// └─────────────────────────────────────────────────────────────┘

(
// OSC address para el proxy Node.js (puerto 57122)
topEnvironment[\hydraAddr] = NetAddr("127.0.0.1", 57122);
"✅ OSC configurado en 127.0.0.1:57122".postln;

// Limpiar OSCdefs al hacer Cmd+Period
CmdPeriod.doOnce({
    OSCdef(\sendKick).tryPerform(\free);
    OSCdef(\sendBass).tryPerform(\free);
    OSCdef(\sendMelody).tryPerform(\free);
    OSCdef(\sendTexture).tryPerform(\free);
    topEnvironment.removeAt(\hydraAddr);
    "⛔ OSCdefs liberados".postln;
});
)

// Test rápido OSC
// topEnvironment[\hydraAddr].sendMsg("/kick");

// ┌─────────────────────────────────────────────────────────────┐
// │ 3. DEFINICIÓN DE PROXIES DE AUDIO                          │
// └─────────────────────────────────────────────────────────────┘

// ─────────────────────────────────────────────────────────────
// 3.1 AMBIENT / SOUNDSCAPE
// ─────────────────────────────────────────────────────────────

~ambient.ar(2);
~ambient.fadeTime = 4;
~ambient[0] = {
    var sig;
    // [TU CÓDIGO AQUÍ]
    sig = SinOsc.ar([200, 201], mul: 0.1);
    sig = FreeVerb.ar(sig, 0.8, 0.9, 0.5);
};
// ~ambient.play;

// ─────────────────────────────────────────────────────────────
// 3.2 KICK / PERCUSIÓN
// ─────────────────────────────────────────────────────────────

~kick.ar(2);
~kick.fadeTime = 0.02;
~kick[0] = {
    var sig, env;
    // [TU CÓDIGO AQUÍ]
    env = EnvGen.kr(Env.perc(0.001, 0.5), \t_trig.kr(0));
    sig = SinOsc.ar(60 * env.exprange(1, 10)) * env;
    sig ! 2;
};
// ~kick.play;

// ─────────────────────────────────────────────────────────────
// 3.3 BASS / GRAVES
// ─────────────────────────────────────────────────────────────

~bass.ar(2);
~bass.fadeTime = 0.1;
~bass[0] = {
    var sig, freq;
    // [TU CÓDIGO AQUÍ]
    freq = \freq.kr(60);
    sig = LFTri.ar(freq) * 0.3;
    sig ! 2;
};
// ~bass.play;

// ─────────────────────────────────────────────────────────────
// 3.4 MELODÍA / TEXTURA ALTA
// ─────────────────────────────────────────────────────────────

~melody.ar(2);
~melody.fadeTime = 0.5;
~melody[0] = {
    var sig, freq;
    // [TU CÓDIGO AQUÍ]
    freq = \freq.kr(440);
    sig = SinOsc.ar(freq) * 0.2;
    sig ! 2;
};
// ~melody.play;

// ─────────────────────────────────────────────────────────────
// 3.5 TEXTURA / NOISE
// ─────────────────────────────────────────────────────────────

~texture.ar(2);
~texture.fadeTime = 2;
~texture[0] = {
    var sig;
    // [TU CÓDIGO AQUÍ]
    sig = WhiteNoise.ar(0.1);
    sig = BPF.ar(sig, 2000, 0.5);
    sig ! 2;
};
// ~texture.play;

// ┌─────────────────────────────────────────────────────────────┐
// │ 4. ENVÍO AUTOMÁTICO DE OSC (bass_level, melody, texture)   │
// └─────────────────────────────────────────────────────────────┘

// ─────────────────────────────────────────────────────────────
// 4.1 BASS → /bass_level (0.0 - 1.0)
// ─────────────────────────────────────────────────────────────

~bass_level.ar(2);
~bass_level.fadeTime = 0.1;
~bass_level[0] = { DC.ar(0) }; // Control manual

// OSCdef para enviar automáticamente
OSCdef(\sendBass, {
    arg msg, time, addr, port;
    var val = msg[3].linlin(-1, 1, 0, 1).clip(0, 1);
    topEnvironment[\hydraAddr].sendMsg("/bass_level", val);
}, '/proxyspace/bass_level');

~bass_level[1] = { SendReply.kr(Impulse.kr(20), '/proxyspace/bass_level', ~bass_level.ar) };

// ─────────────────────────────────────────────────────────────
// 4.2 MELODY → /melody_note (0.0 - 1.0)
// ─────────────────────────────────────────────────────────────

~melody_note.ar(2);
~melody_note.fadeTime = 0.5;
~melody_note[0] = { DC.ar(0.5) }; // Control manual

OSCdef(\sendMelody, {
    arg msg, time, addr, port;
    var val = msg[3].linlin(-1, 1, 0, 1).clip(0, 1);
    topEnvironment[\hydraAddr].sendMsg("/melody_note", val);
}, '/proxyspace/melody_note');

~melody_note[1] = { SendReply.kr(Impulse.kr(20), '/proxyspace/melody_note', ~melody_note.ar) };

// ─────────────────────────────────────────────────────────────
// 4.3 TEXTURE → /texture (0.0 - 1.0)
// ─────────────────────────────────────────────────────────────

~texture_level.ar(2);
~texture_level.fadeTime = 2;
~texture_level[0] = { DC.ar(0) }; // Control manual

OSCdef(\sendTexture, {
    arg msg, time, addr, port;
    var val = msg[3].linlin(-1, 1, 0, 1).clip(0, 1);
    topEnvironment[\hydraAddr].sendMsg("/texture", val);
}, '/proxyspace/texture_level');

~texture_level[1] = { SendReply.kr(Impulse.kr(20), '/proxyspace/texture_level', ~texture_level.ar) };

// ┌─────────────────────────────────────────────────────────────┐
// │ 5. PATRONES RÍTMICOS (Pbind / Pdef)                        │
// └─────────────────────────────────────────────────────────────┘

// ─────────────────────────────────────────────────────────────
// 5.1 PATRÓN DE KICKS → envía /kick a oF
// ─────────────────────────────────────────────────────────────

(
Pdef(\kickPattern,
    Pbind(
        \type, \osc,
        \addr, topEnvironment[\hydraAddr],
        \oscPath, "/kick",
        \dur, 4, // Cada 4 beats
    )
);
)
// Pdef(\kickPattern).play; // Iniciar
// Pdef(\kickPattern).stop; // Detener

// ─────────────────────────────────────────────────────────────
// 5.2 PATRÓN DE BASS
// ─────────────────────────────────────────────────────────────

(
Pdef(\bassPattern,
    Pbind(
        \instrument, \default,
        \freq, Pseq([60, 65, 58, 62].midicps, inf),
        \dur, 1,
        \amp, 0.3,
    )
);
)
// Pdef(\bassPattern).play;
// Pdef(\bassPattern).stop;

// ─────────────────────────────────────────────────────────────
// 5.3 PATRÓN DE MELODÍA
// ─────────────────────────────────────────────────────────────

(
Pdef(\melodyPattern,
    Pbind(
        \instrument, \default,
        \freq, Pseq([72, 75, 79, 77].midicps, inf),
        \dur, Pseq([0.5, 0.5, 1, 1], inf),
        \amp, 0.2,
    )
);
)
// Pdef(\melodyPattern).play;
// Pdef(\melodyPattern).stop;

// ┌─────────────────────────────────────────────────────────────┐
// │ 6. CONTROLES EN VIVO (modificar durante performance)       │
// └─────────────────────────────────────────────────────────────┘

// ─────────────────────────────────────────────────────────────
// 6.1 Control manual de bass_level (erosión en LANDSCAPES)
// ─────────────────────────────────────────────────────────────

// Suave
~bass_level[0] = { LFNoise1.kr(0.5).range(0, 0.4) };

// Medio
~bass_level[0] = { LFNoise1.kr(0.5).range(0, 0.6) };

// Intenso
~bass_level[0] = { LFNoise1.kr(0.5).range(0, 0.8) };

// Fijo
~bass_level[0] = { DC.ar(0.5) };

// ─────────────────────────────────────────────────────────────
// 6.2 Control manual de melody_note (revelación en LANDSCAPES)
// ─────────────────────────────────────────────────────────────

// Revelar gradualmente
~melody_note[0] = { Line.kr(0.3, 1.0, 20) };

// Oscilación lenta
~melody_note[0] = { LFNoise1.kr(0.2).range(0.5, 1.0) };

// Fijo
~melody_note[0] = { DC.ar(0.7) };

// ─────────────────────────────────────────────────────────────
// 6.3 Control manual de texture (ondulación en LANDSCAPES)
// ─────────────────────────────────────────────────────────────

// Ondulación suave
~texture_level[0] = { LFNoise1.kr(0.3).range(0, 0.4) };

// Ondulación intensa
~texture_level[0] = { LFNoise1.kr(0.3).range(0, 0.7) };

// Fijo
~texture_level[0] = { DC.ar(0.3) };

// ┌─────────────────────────────────────────────────────────────┐
// │ 7. FUNCIONES ÚTILES                                        │
// └─────────────────────────────────────────────────────────────┘

// ─────────────────────────────────────────────────────────────
// 7.1 Cambiar imagen manualmente
// ─────────────────────────────────────────────────────────────

~cambiarImagen = { topEnvironment[\hydraAddr].sendMsg("/kick"); };
// ~cambiarImagen.value;

// ─────────────────────────────────────────────────────────────
// 7.2 Reset completo de efectos visuales
// ─────────────────────────────────────────────────────────────

(
~resetVisual = {
    var addr = topEnvironment[\hydraAddr];
    addr.sendMsg("/bass_level", 0.0);
    addr.sendMsg("/melody_note", 0.5);
    addr.sendMsg("/texture", 0.0);
    "⛔ RESET VISUAL".postln;
};
)
// ~resetVisual.value;

// ─────────────────────────────────────────────────────────────
// 7.3 Stop completo de audio
// ─────────────────────────────────────────────────────────────

(
~stopAll = {
    Pdef.all.do(_.stop);
    p.clear;
    "⛔ AUDIO DETENIDO".postln;
};
)
// ~stopAll.value;

// ┌─────────────────────────────────────────────────────────────┐
// │ 8. NOTAS Y DESARROLLO                                      │
// └─────────────────────────────────────────────────────────────┘

/*

IDEA 1: [Escribe tus ideas aquí]

IDEA 2:

IDEA 3:

PROBLEMAS ENCONTRADOS:
-

MEJORAS FUTURAS:
-

*/

// ═══════════════════════════════════════════════════════════════
// FIN DE LA SESIÓN
// ═══════════════════════════════════════════════════════════════

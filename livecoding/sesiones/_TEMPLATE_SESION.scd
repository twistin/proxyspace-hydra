// ===================================================================
// üéõÔ∏è Plantilla General de Sesi√≥n ProxySpace Hydra
// -------------------------------------------------------------------
// Duplica este archivo, ren√≥mbralo con la fecha/nombre del show y
// personal√≠zalo. Secciones clave:
//   1. Metadata y checklist
//   2. Arranque r√°pido (proxy + oF + setup SC)
//   3. Instrumentos / buffers / patrones
//   4. Puente OSC ‚Üí openFrameworks (par√°metros est√°ndar)
//   5. Timeline y cues
//   6. Notas post‚Äëshow
// ===================================================================

// -------------------------------------------------------------------
// 1. METADATA Y CHECKLIST
// -------------------------------------------------------------------

/*
SESI√ìN:
  T√≠tulo:   <nombre del set>
  Lugar:    <venue / stream>
  Fecha:    <AAAA-MM-DD>
  Notas:    <temperatura, p√∫blico, mood‚Ä¶>

CHECKLIST R√ÅPIDO:
  [ ] Proxy Node `./start_live_session.sh`
  [ ] openFrameworks corriendo en 12345
  [ ] Setup.scd evaluado
  [ ] Samples cargados (ruta revisada)
  [ ] Controladores MIDI / OSC conectados
  [ ] Hydra / Browser mostrando HUD
*/

// -------------------------------------------------------------------
// 2. ARRANQUE AUTOM√ÅTICO
// -------------------------------------------------------------------

(
// Opcional: lanzar proxy/startup desde SC (√∫til si trabajas off-site)
// fork { "/path/a/start_live_session.sh".standardizePath.unixCmd };

SoundSessionStartAll.();    // Inicializa server, buffers base y puente OSC
SoundSessionPlay.();        // Arranca patr√≥n de referencia (puedes pararlo luego)

// Configuraci√≥n extra espec√≠fica del set
SoundSession.use({
    ~tempo = 100/60;           // Ajusta BPM global
    t.tempo_(~tempo);          // Aplica tempo al clock
    ~samplesRelative = "samples/set1/set-sounds/"; // Actualiza si cambia
});
)

// -------------------------------------------------------------------
// 3. INSTRUMENTOS / BUFFERS / PATRONES
// -------------------------------------------------------------------

/*
Gu√≠a:
  - Usa NodeProxy para proxies de audio (`~nombre.ar(2)`).
  - Para patrones complejos, encapsula en `Pdef`/`Tdef` y as√≥cialos a un proxy.
  - Llama `~visBridge.watch(\nombre, ~nombre);` para exponer par√°metros est√°ndar
    (`/of/nombre/rms`, `/of/nombre/peak`, etc.) autom√°ticamente.
*/

(
// Ejemplo: Drone base
~drone.ar(2);
~drone[0] = {
    var sig = Pulse.ar([40, 41] + LFNoise0.kr(0.1).range(-0.5, 0.5), 0.3);
    sig = RLPF.ar(sig, LFNoise1.kr(0.05).range(200, 1200), 0.2);
    sig = sig.tanh;
    sig * 0.2;
};
~drone.play;
~visBridge.watch(\drone, ~drone);

// Ejemplo: Player de buffers con patr√≥n
~grains = NodeProxy.audio(s, 2);
~grains.source = { Silent.ar(2) }; // placeholder

~grains.pattern = Pbind(
    \instrument, \bufsynth,
    \buf, Pxrand(~visBridge.buffersFor(\setSounds), inf), // helper opcional
    \dur, Pexprand(0.125, 0.5, inf),
    \rate, Pwhite(0.5, 2.0, inf),
    \spos, Pwhite(0.0, 0.9, inf),
    \amp, Pexprand(0.2, 0.7, inf),
    \atk, 0.01,
    \sus, Pwhite(0.0, 0.2, inf),
    \rel, Pwhite(0.1, 0.4, inf),
    \pan, Pwhite(-0.8, 0.8, inf)
);

~grains.play;
~grains.pattern.play(t, quant: 1);
~visBridge.watch(\grains, ~grains);

// A√±ade tus instrumentos adicionales aqu√≠
)

// -------------------------------------------------------------------
// 4. PUENTE OSC ‚Üí OPENFRAMEWORKS / HYDRA
// -------------------------------------------------------------------

/*
Convenciones sugeridas (respetadas en ofApp.cpp):
  /kick                 ‚Üí trigger escena LANDSCAPES/DUALISMOS
  /bass_level           ‚Üí intensidad global (erosi√≥n, blur)
  /melody_note          ‚Üí tinte y revelaci√≥n
  /texture              ‚Üí desplazamiento y feedback decay
  /of/<canal>/rms       ‚Üí nivel continuo de un proxy (auto via visBridge)
  /of/<canal>/peak      ‚Üí picos (flash, particulas)
  /of/<canal>/centroid  ‚Üí centroid espectral (color, saturaci√≥n)
  /scene/<id>           ‚Üí cambiar escena visual directamente (si lo necesitas)

Puedes a√±adir rutas nuevas as√≠:
*/

(
// Ejemplo: enviar rate y pan del patr√≥n `~grains`
OSCdef(\grainsExtra, { |msg|
    var rate = msg[3].linlin(0.5, 2.0, 0.0, 1.0).clip(0, 1);
    var pan = msg[4];
    topEnvironment[\hydraAddr].sendMsg("/of/grains/rate", rate);
    topEnvironment[\hydraAddr].sendMsg("/of/grains/pan", pan);
}, '/proxyspace/grains', skipInfrared: true);

// Activa triggers manuales si quieres reacciones dramatizadas
~cambiarEscena = { |id = 0| topEnvironment[\hydraAddr].sendMsg("/scene", id) };
)

// -------------------------------------------------------------------
// 5. TIMELINE / CUES
// -------------------------------------------------------------------

/*
Estructura sugerida para tu set:

ACTO 0 ‚Äî CHECK SOUND (2 min)
  - Revisa drone base (~drone)
  - Ajusta niveles en Hydra/of HUD

ACTO 1 ‚Äî INTRO TEXTURAS (5 min)
  - Activa ~grains.pattern
  - Env√≠a `/kick` manual para iniciar erosi√≥n visual
  - Usa SoundSessionStop.(); si quieres limpiar antes del siguiente acto

ACTO 2 ‚Äî GROOVE PRINCIPAL (10 min)
  - A√±ade nuevo proxy ~perc
  - Sincroniza con patrones MIDI externamente (tempo: 100 BPM)
  - Manipula `/texture` via slider

ACTO 3 ‚Äî CL√çMAX / FADE (5 min)
  - Incrementa globalIntensity via `/bass_level`
  - Usa `SoundSessionCleanup.();` al finalizar

Escribe tus cues espec√≠ficos aqu√≠:
*/

/*
Cue A: ______________________________________________________________
Cue B: ______________________________________________________________
Cue C: ______________________________________________________________
*/

// -------------------------------------------------------------------
// 6. NOTAS POST-SHOW
// -------------------------------------------------------------------

/*
‚úÖ Qu√© funcion√≥:
  -
  -

‚ö†Ô∏è Problemas a corregir:
  -
  -

üí° Ideas para iterar:
  -
  -
*/
